-- SQLITE QUERY
--____________________________________________

-- 1. Write a query to Display the product details (product_class_code, product_id, product_desc, product_price,) as per the following criteria and sort them in descending order of category: a. If the category is 2050, increase the price by 2000 b. If the category is 2051, increase the price by 500 c. If the category is 2052, increase the price by 600. Hint: Use case statement. no permanent change in table required. (60 ROWS) [NOTE: PRODUCT TABLE]

SELECT PRODUCT_CLASS_CODE,PRODUCT_ID,PRODUCT_DESC,PRODUCT_PRICE,CASE  WHEN PRODUCT_CLASS_CODE = 2050 THEN PRODUCT_PRICE +2000 WHEN PRODUCT_CLASS_CODE = 2051 THEN PRODUCT_PRICE+500 WHEN PRODUCT_CLASS_CODE = 2052 THEN PRODUCT_PRICE+600 END  new_price  from PRODUCT ORDER by PRODUCT_CLASS_CODE DESC;

-- 2. Write a query to display (product_class_desc, product_id, product_desc, product_quantity_avail ) and Show inventory status of products as below as per their available quantity: a. For Electronics and Computer categories, if available quantity is <= 10, show 'Low stock', 11 <= qty <= 30, show 'In stock', >= 31, show 'Enough stock' b. For Stationery and Clothes categories, if qty <= 20, show 'Low stock', 21 <= qty <= 80, show 'In stock', >= 81, show 'Enough stock' c. Rest of the categories, if qty <= 15 – 'Low Stock', 16 <= qty <= 50 – 'In Stock', >= 51 – 'Enough stock' For all categories, if available quantity is 0, show 'Out of stock'. Hint: Use case statement. (60 ROWS) [NOTE: TABLES TO BE USED – product, product_class]

SELECT pc.PRODUCT_CLASS_DESC,p.PRODUCT_ID,p.PRODUCT_DESC,p.PRODUCT_QUANTITY_AVAIL,CASE  WHEN pc.PRODUCT_CLASS_DESC = 'Electronics' or pc.PRODUCT_CLASS_DESC = 'Computer' THEN CASE  WHEN p.PRODUCT_QUANTITY_AVAIL <= 10 THEN 'Low stock' WHEN p.PRODUCT_QUANTITY_AVAIL >= 11 and p.PRODUCT_QUANTITY_AVAIL <= 30 THEN 'In stock' WHEN p.PRODUCT_QUANTITY_AVAIL >= 31 THEN 'Enough stock' END WHEN pc.PRODUCT_CLASS_DESC = 'Stationery' or pc.PRODUCT_CLASS_DESC = 'Clothes' THEN CASE  WHEN p.PRODUCT_QUANTITY_AVAIL <= 20 THEN 'Low stock' WHEN p.PRODUCT_QUANTITY_AVAIL >= 21 and p.PRODUCT_QUANTITY_AVAIL <= 80 THEN 'In stock' WHEN p.PRODUCT_QUANTITY_AVAIL >= 81 THEN 'Enough stock' END WHEN pc.PRODUCT_CLASS_DESC NOT IN ('Electronics','Computer','Stationery','Clothes') THEN CASE  WHEN p.PRODUCT_QUANTITY_AVAIL <= 15 THEN 'Low stock' WHEN p.PRODUCT_QUANTITY_AVAIL >= 16 and p.PRODUCT_QUANTITY_AVAIL <= 50 THEN 'In stock' WHEN p.PRODUCT_QUANTITY_AVAIL >= 51 THEN 'Enough stock' END END Inventory_status
 from PRODUCT as p INNER JOIN PRODUCT_CLASS as pc ON p.PRODUCT_CLASS_CODE = pc.PRODUCT_CLASS_CODE ORDER by pc.PRODUCT_CLASS_CODE;
 
 -- 3. Write a query to show the number of cities in all countries other than USA & MALAYSIA, with more than 1 city, in the descending order of CITIES. (2 rows) [NOTE: ADDRESS TABLE]
  
 SELECT COUNTRY,count(CITY) as count_city FROM ADDRESS WHERE COUNTRY NOT IN ('USA','Malaysia') GROUP by COUNTRY HAVING count(CITY)>1;
 
-- 4. Write a query to display the customer_id,customer full name ,city,pincode,and order details (order id, product class desc, product desc, subtotal(product_quantity * product_price)) for orders shipped to cities whose pin codes do not have any 0s in them. Sort the output on customer name and subtotal. (52 ROWS) [NOTE: TABLE TO BE USED - online_customer, address, order_header, order_items, product, product_class]

SELECT OC.CUSTOMER_ID, (OC.CUSTOMER_FNAME || ' ' || OC.CUSTOMER_LNAME) as 'CUSTOMER FULL NAME', A.CITY, A.PINCODE, OH.ORDER_ID, PC.PRODUCT_CLASS_DESC, P.PRODUCT_DESC, (OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE) as subtotal  from ADDRESS as A INNER JOIN ONLINE_CUSTOMER as OC on OC.ADDRESS_ID = A.ADDRESS_ID INNER JOIN ORDER_HEADER as OH on OC.CUSTOMER_ID = OH.CUSTOMER_ID INNER JOIN ORDER_ITEMS as OI on OH.ORDER_ID = OI.ORDER_ID INNER JOIN PRODUCT as P on OI.PRODUCT_ID = P.PRODUCT_ID INNER JOIN PRODUCT_CLASS as PC on P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE WHERE A.PINCODE not like '%0%' AND  OH.ORDER_STATUS = 'Shipped' ORDER BY oc.CUSTOMER_FNAME,oh.ORDER_DATE,subtotal;

-- 5. Write a Query to display product id,product description,totalquantity(sum(product quantity) for a given item whose product id is 201 and which item has been bought along with it maximum no. of times. Display only one record which has the maximum value for total quantity in this scenario. (USE SUB-QUERY)(1 ROW)[NOTE : ORDER_ITEMS TABLE,PRODUCT TABLE]

select p.PRODUCT_ID , p.PRODUCT_DESC,sum(ord.PRODUCT_QUANTITY) as TOTAL_QUANTITY from PRODUCT p inner join ORDER_ITEMS ord on p.PRODUCT_ID = ord.PRODUCT_ID
where (select sum(PRODUCT_QUANTITY) from ORDER_ITEMS ) and p.PRODUCT_ID = 201;

-- 6. Write a query to display the customer_id,customer name, email and order details (order id, product desc,product qty, subtotal(product_quantity * product_price)) for all customers even if they have not ordered any item.(225 ROWS) [NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product]

SELECT OC.CUSTOMER_ID, (OC.CUSTOMER_FNAME || ' ' || OC.CUSTOMER_LNAME) as 'CUSTOMER NAME',OH.ORDER_STATUS, OC.CUSTOMER_EMAIL, OH.ORDER_ID, P.PRODUCT_ID, P.PRODUCT_DESC,OI.PRODUCT_QUANTITY,(OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE)as 'SUBTOTAL' 
from ONLINE_CUSTOMER as OC 
LEFT JOIN ORDER_HEADER as OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID 
LEFT JOIN ORDER_ITEMS as OI ON OH.ORDER_ID = OI.ORDER_ID 
LEFT JOIN PRODUCT as P ON OI.PRODUCT_ID = P.PRODUCT_ID;

--____________________________________________

-- MYSQL QUERY
--____________________________________________


-- 7. Write a query to display carton id, (len*width*height) as carton_vol and identify the optimum carton (carton with the least volume whose volume is greater than the total volume of all items (len * width * height * product_quantity)) for a given order whose order id is 10006, Assume all items of an order are packed into one single carton (box). (1 ROW) [NOTE: CARTON TABLE]

select  * from (select CARTON_ID,(LEN * WIDTH * HEIGHT) as CARTON_VOL from carton as C  order by CARTON_VOL ) as X
inner join
(select sum(P.LEN*P.WIDTH*P.HEIGHT*OI.product_quantity) as OPTIMUM_CARTON from product as p left join order_items as OI on P.product_id = OI.product_id where OI.order_id = 10006) as Y on X.CARTON_VOL > Y.OPTIMUM_CARTON limit 1;

-- 8. Write a query to display details (customer id,customer fullname,order id,product quantity) of customers who bought more than ten (i.e. total order qty) products with credit card or Net banking as the mode of payment per shipped order. (6 ROWS) [NOTE: TABLES TO BE USED - online_customer, order_header, order_items,]

SELECT C.CUSTOMER_ID, CONCAT(C.CUSTOMER_FNAME,' ',C.CUSTOMER_LNAME) AS CUSTOMER_NAME, OH.ORDER_ID,OI.PRODUCT_QUANTITY, sum(OI.PRODUCT_QUANTITY) as Total_Quantity FROM online_customer as C inner join order_header as OH on C.CUSTOMER_ID = OH.CUSTOMER_ID Inner join order_items as OI on OH.ORDER_ID = OI.ORDER_ID WHERE (OH.PAYMENT_MODE LIKE '%Credit Card%' OR OH.PAYMENT_MODE LIKE '%Net Banking%') AND ORDER_STATUS = 'Shipped' group by C.CUSTOMER_ID,OH.order_id having sum(OI.PRODUCT_QUANTITY) > '10' order by Total_Quantity desc;

-- 9. Write a query to display the order_id, customer id and cutomer full name of customers starting with the alphabet "A" along with (product_quantity) as total quantity of products shipped for order ids > 10030. (5 ROWS) [NOTE: TABLES TO BE USED - online_customer, order_header, order_items]

SELECT OH.ORDER_ID, C.CUSTOMER_ID, CONCAT(C.CUSTOMER_FNAME,' ',C.CUSTOMER_LNAME) AS CUSTOMER_NAME ,sum(OI.PRODUCT_QUANTITY) as "Total Quantity" FROM online_customer as C inner join order_header as OH on C.CUSTOMER_ID = OH.CUSTOMER_ID Inner join order_items as OI on OH.ORDER_ID = OI.ORDER_ID WHERE (CONCAT(C.CUSTOMER_FNAME,' ',C.CUSTOMER_LNAME)  LIKE 'A%') and OH.ORDER_ID > 10030 AND OH.ORDER_STATUS = 'Shipped' group by OH.ORDER_ID;

-- 10. Write a query to display product class description ,total quantity (sum(product_quantity),Total value (product_quantity * product price) and show which class of products have been shipped highest(Quantity) to countries outside India other than USA? Also show the total value of those items. (1 ROWS)[NOTE:PRODUCT TABLE,ADDRESS TABLE,ONLINE_CUSTOMER TABLE,ORDER_HEADER TABLE,ORDER_ITEMS TABLE,PRODUCT_CLASS TABLE]


select max(PC.product_class_desc) as product_class_desc,sum( OI.PRODUCT_QUANTITY) as "Total Quantity", (P.PRODUCT_PRICE * OI.PRODUCT_QUANTITY) as "Total Value" from product_class as PC Inner join product as P on PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE Inner join order_items as OI on P.PRODUCT_ID = OI.PRODUCT_ID Inner join order_header as OH on OH.ORDER_ID = OI.ORDER_ID Inner join online_customer as OC on OH.CUSTOMER_ID = OC.CUSTOMER_ID Inner join address as A on OC.ADDRESS_ID = A.ADDRESS_ID where  OH.ORDER_STATUS = 'Shipped' AND A.COUNTRY NOT IN ('USA','INDIA') group by PC.product_class_desc,A.COUNTRY order by sum( OI.PRODUCT_QUANTITY) desc limit 1 ;
